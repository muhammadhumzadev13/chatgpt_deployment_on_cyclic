{"ast":null,"code":"var FuzzySet = function FuzzySet(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {\n  var fuzzyset = {};\n\n  // default options\n  arr = arr || [];\n  fuzzyset.gramSizeLower = gramSizeLower || 2;\n  fuzzyset.gramSizeUpper = gramSizeUpper || 3;\n  fuzzyset.useLevenshtein = typeof useLevenshtein !== 'boolean' ? true : useLevenshtein;\n\n  // define all the object functions and attributes\n  fuzzyset.exactSet = {};\n  fuzzyset.matchDict = {};\n  fuzzyset.items = {};\n\n  // helper functions\n  var levenshtein = function levenshtein(str1, str2) {\n    var current = [],\n      prev,\n      value;\n    for (var i = 0; i <= str2.length; i++) for (var j = 0; j <= str1.length; j++) {\n      if (i && j) {\n        if (str1.charAt(j - 1) === str2.charAt(i - 1)) value = prev;else value = Math.min(current[j], current[j - 1], prev) + 1;\n      } else value = i + j;\n      prev = current[j];\n      current[j] = value;\n    }\n    return current.pop();\n  };\n\n  // return an edit distance from 0 to 1\n  var _distance = function _distance(str1, str2) {\n    if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n    if (str1 === null || str2 === null) return 0;\n    str1 = String(str1);\n    str2 = String(str2);\n    var distance = levenshtein(str1, str2);\n    if (str1.length > str2.length) {\n      return 1 - distance / str1.length;\n    } else {\n      return 1 - distance / str2.length;\n    }\n  };\n\n  // u00C0-u00FF is latin characters\n  // u0621-u064a is arabic letters\n  // u0660-u0669 is arabic numerals\n  // TODO: figure out way to do this for more languages\n  var _nonWordRe = /[^a-zA-Z0-9\\u00C0-\\u00FF\\u0621-\\u064A\\u0660-\\u0669, ]+/g;\n  var _iterateGrams = function _iterateGrams(value, gramSize) {\n    gramSize = gramSize || 2;\n    var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n      lenDiff = gramSize - simplified.length,\n      results = [];\n    if (lenDiff > 0) {\n      for (var i = 0; i < lenDiff; ++i) {\n        simplified += '-';\n      }\n    }\n    for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n      results.push(simplified.slice(i, i + gramSize));\n    }\n    return results;\n  };\n  var _gramCounter = function _gramCounter(value, gramSize) {\n    // return an object where key=gram, value=number of occurrences\n    gramSize = gramSize || 2;\n    var result = {},\n      grams = _iterateGrams(value, gramSize),\n      i = 0;\n    for (i; i < grams.length; ++i) {\n      if (grams[i] in result) {\n        result[grams[i]] += 1;\n      } else {\n        result[grams[i]] = 1;\n      }\n    }\n    return result;\n  };\n\n  // the main functions\n  fuzzyset.get = function (value, defaultValue, minMatchScore) {\n    // check for value in set, returning defaultValue or null if none found\n    if (minMatchScore === undefined) {\n      minMatchScore = .33;\n    }\n    var result = this._get(value, minMatchScore);\n    if (!result && typeof defaultValue !== 'undefined') {\n      return defaultValue;\n    }\n    return result;\n  };\n  fuzzyset._get = function (value, minMatchScore) {\n    var results = [];\n    // start with high gram size and if there are no results, go to lower gram sizes\n    for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n      results = this.__get(value, gramSize, minMatchScore);\n      if (results && results.length > 0) {\n        return results;\n      }\n    }\n    return null;\n  };\n  fuzzyset.__get = function (value, gramSize, minMatchScore) {\n    var normalizedValue = this._normalizeStr(value),\n      matches = {},\n      gramCounts = _gramCounter(normalizedValue, gramSize),\n      items = this.items[gramSize],\n      sumOfSquareGramCounts = 0,\n      gram,\n      gramCount,\n      i,\n      index,\n      otherGramCount;\n    for (gram in gramCounts) {\n      gramCount = gramCounts[gram];\n      sumOfSquareGramCounts += Math.pow(gramCount, 2);\n      if (gram in this.matchDict) {\n        for (i = 0; i < this.matchDict[gram].length; ++i) {\n          index = this.matchDict[gram][i][0];\n          otherGramCount = this.matchDict[gram][i][1];\n          if (index in matches) {\n            matches[index] += gramCount * otherGramCount;\n          } else {\n            matches[index] = gramCount * otherGramCount;\n          }\n        }\n      }\n    }\n    function isEmptyObject(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) return false;\n      }\n      return true;\n    }\n    if (isEmptyObject(matches)) {\n      return null;\n    }\n    var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n      results = [],\n      matchScore;\n    // build a results list of [score, str]\n    for (var matchIndex in matches) {\n      matchScore = matches[matchIndex];\n      results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n    }\n    var sortDescending = function sortDescending(a, b) {\n      if (a[0] < b[0]) {\n        return 1;\n      } else if (a[0] > b[0]) {\n        return -1;\n      } else {\n        return 0;\n      }\n    };\n    results.sort(sortDescending);\n    if (this.useLevenshtein) {\n      var newResults = [],\n        endIndex = Math.min(50, results.length);\n      // truncate somewhat arbitrarily to 50\n      for (var i = 0; i < endIndex; ++i) {\n        newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n      }\n      results = newResults;\n      results.sort(sortDescending);\n    }\n    newResults = [];\n    results.forEach(function (scoreWordPair) {\n      if (scoreWordPair[0] >= minMatchScore) {\n        newResults.push([scoreWordPair[0], this.exactSet[scoreWordPair[1]]]);\n      }\n    }.bind(this));\n    return newResults;\n  };\n  fuzzyset.add = function (value) {\n    var normalizedValue = this._normalizeStr(value);\n    if (normalizedValue in this.exactSet) {\n      return false;\n    }\n    var i = this.gramSizeLower;\n    for (i; i < this.gramSizeUpper + 1; ++i) {\n      this._add(value, i);\n    }\n  };\n  fuzzyset._add = function (value, gramSize) {\n    var normalizedValue = this._normalizeStr(value),\n      items = this.items[gramSize] || [],\n      index = items.length;\n    items.push(0);\n    var gramCounts = _gramCounter(normalizedValue, gramSize),\n      sumOfSquareGramCounts = 0,\n      gram,\n      gramCount;\n    for (gram in gramCounts) {\n      gramCount = gramCounts[gram];\n      sumOfSquareGramCounts += Math.pow(gramCount, 2);\n      if (gram in this.matchDict) {\n        this.matchDict[gram].push([index, gramCount]);\n      } else {\n        this.matchDict[gram] = [[index, gramCount]];\n      }\n    }\n    var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n    items[index] = [vectorNormal, normalizedValue];\n    this.items[gramSize] = items;\n    this.exactSet[normalizedValue] = value;\n  };\n  fuzzyset._normalizeStr = function (str) {\n    if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n    return str.toLowerCase();\n  };\n\n  // return length of items in set\n  fuzzyset.length = function () {\n    var count = 0,\n      prop;\n    for (prop in this.exactSet) {\n      if (this.exactSet.hasOwnProperty(prop)) {\n        count += 1;\n      }\n    }\n    return count;\n  };\n\n  // return is set is empty\n  fuzzyset.isEmpty = function () {\n    for (var prop in this.exactSet) {\n      if (this.exactSet.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // return list of values loaded into set\n  fuzzyset.values = function () {\n    var values = [],\n      prop;\n    for (prop in this.exactSet) {\n      if (this.exactSet.hasOwnProperty(prop)) {\n        values.push(this.exactSet[prop]);\n      }\n    }\n    return values;\n  };\n\n  // initialization\n  var i = fuzzyset.gramSizeLower;\n  for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {\n    fuzzyset.items[i] = [];\n  }\n  // add all the items to the set\n  for (i = 0; i < arr.length; ++i) {\n    fuzzyset.add(arr[i]);\n  }\n  return fuzzyset;\n};\nexport default FuzzySet;","map":{"version":3,"names":["FuzzySet","arr","useLevenshtein","gramSizeLower","gramSizeUpper","fuzzyset","exactSet","matchDict","items","levenshtein","str1","str2","current","prev","value","i","length","j","charAt","Math","min","pop","_distance","String","distance","_nonWordRe","_iterateGrams","gramSize","simplified","toLowerCase","replace","lenDiff","results","push","slice","_gramCounter","result","grams","get","defaultValue","minMatchScore","undefined","_get","__get","normalizedValue","_normalizeStr","matches","gramCounts","sumOfSquareGramCounts","gram","gramCount","index","otherGramCount","pow","isEmptyObject","obj","prop","hasOwnProperty","vectorNormal","sqrt","matchScore","matchIndex","sortDescending","a","b","sort","newResults","endIndex","forEach","scoreWordPair","bind","add","_add","str","Object","prototype","toString","call","count","isEmpty","values"],"sources":["/home/humza/Documents/afterflea/projects/drive-download-20230421T195214Z-001/script/OpenAI-Template.1.3-update-auth-signups (1)/node_modules/fuzzyset/dist/fuzzyset.esm.js"],"sourcesContent":["const FuzzySet = function(arr, useLevenshtein, gramSizeLower, gramSizeUpper) {\n    var fuzzyset = {\n\n    };\n\n    // default options\n    arr = arr || [];\n    fuzzyset.gramSizeLower = gramSizeLower || 2;\n    fuzzyset.gramSizeUpper = gramSizeUpper || 3;\n    fuzzyset.useLevenshtein = (typeof useLevenshtein !== 'boolean') ? true : useLevenshtein;\n\n    // define all the object functions and attributes\n    fuzzyset.exactSet = {};\n    fuzzyset.matchDict = {};\n    fuzzyset.items = {};\n\n    // helper functions\n    var levenshtein = function(str1, str2) {\n        var current = [], prev, value;\n\n        for (var i = 0; i <= str2.length; i++)\n            for (var j = 0; j <= str1.length; j++) {\n            if (i && j)\n                if (str1.charAt(j - 1) === str2.charAt(i - 1))\n                value = prev;\n                else\n                value = Math.min(current[j], current[j - 1], prev) + 1;\n            else\n                value = i + j;\n\n            prev = current[j];\n            current[j] = value;\n            }\n\n        return current.pop();\n    };\n\n    // return an edit distance from 0 to 1\n    var _distance = function(str1, str2) {\n        if (str1 === null && str2 === null) throw 'Trying to compare two null values';\n        if (str1 === null || str2 === null) return 0;\n        str1 = String(str1); str2 = String(str2);\n\n        var distance = levenshtein(str1, str2);\n        if (str1.length > str2.length) {\n            return 1 - distance / str1.length;\n        } else {\n            return 1 - distance / str2.length;\n        }\n    };\n\n    // u00C0-u00FF is latin characters\n    // u0621-u064a is arabic letters\n    // u0660-u0669 is arabic numerals\n    // TODO: figure out way to do this for more languages\n    var _nonWordRe = /[^a-zA-Z0-9\\u00C0-\\u00FF\\u0621-\\u064A\\u0660-\\u0669, ]+/g;\n\n    var _iterateGrams = function(value, gramSize) {\n        gramSize = gramSize || 2;\n        var simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-',\n            lenDiff = gramSize - simplified.length,\n            results = [];\n        if (lenDiff > 0) {\n            for (var i = 0; i < lenDiff; ++i) {\n                simplified += '-';\n            }\n        }\n        for (var i = 0; i < simplified.length - gramSize + 1; ++i) {\n            results.push(simplified.slice(i, i + gramSize));\n        }\n        return results;\n    };\n\n    var _gramCounter = function(value, gramSize) {\n        // return an object where key=gram, value=number of occurrences\n        gramSize = gramSize || 2;\n        var result = {},\n            grams = _iterateGrams(value, gramSize),\n            i = 0;\n        for (i; i < grams.length; ++i) {\n            if (grams[i] in result) {\n                result[grams[i]] += 1;\n            } else {\n                result[grams[i]] = 1;\n            }\n        }\n        return result;\n    };\n\n    // the main functions\n    fuzzyset.get = function(value, defaultValue, minMatchScore) {\n        // check for value in set, returning defaultValue or null if none found\n        if (minMatchScore === undefined) {\n            minMatchScore = .33;\n        }\n        var result = this._get(value, minMatchScore);\n        if (!result && typeof defaultValue !== 'undefined') {\n            return defaultValue;\n        }\n        return result;\n    };\n\n    fuzzyset._get = function(value, minMatchScore) {\n        var results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (var gramSize = this.gramSizeUpper; gramSize >= this.gramSizeLower; --gramSize) {\n            results = this.__get(value, gramSize, minMatchScore);\n            if (results && results.length > 0) {\n                return results;\n            }\n        }\n        return null;\n    };\n\n    fuzzyset.__get = function(value, gramSize, minMatchScore) {\n        var normalizedValue = this._normalizeStr(value),\n            matches = {},\n            gramCounts = _gramCounter(normalizedValue, gramSize),\n            items = this.items[gramSize],\n            sumOfSquareGramCounts = 0,\n            gram,\n            gramCount,\n            i,\n            index,\n            otherGramCount;\n\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                for (i = 0; i < this.matchDict[gram].length; ++i) {\n                    index = this.matchDict[gram][i][0];\n                    otherGramCount = this.matchDict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gramCount * otherGramCount;\n                    } else {\n                        matches[index] = gramCount * otherGramCount;\n                    }\n                }\n            }\n        }\n\n        function isEmptyObject(obj) {\n            for(var prop in obj) {\n                if(obj.hasOwnProperty(prop))\n                    return false;\n            }\n            return true;\n        }\n\n        if (isEmptyObject(matches)) {\n            return null;\n        }\n\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts),\n            results = [],\n            matchScore;\n        // build a results list of [score, str]\n        for (var matchIndex in matches) {\n            matchScore = matches[matchIndex];\n            results.push([matchScore / (vectorNormal * items[matchIndex][0]), items[matchIndex][1]]);\n        }\n        var sortDescending = function(a, b) {\n            if (a[0] < b[0]) {\n                return 1;\n            } else if (a[0] > b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        };\n        results.sort(sortDescending);\n        if (this.useLevenshtein) {\n            var newResults = [],\n                endIndex = Math.min(50, results.length);\n            // truncate somewhat arbitrarily to 50\n            for (var i = 0; i < endIndex; ++i) {\n                newResults.push([_distance(results[i][1], normalizedValue), results[i][1]]);\n            }\n            results = newResults;\n            results.sort(sortDescending);\n        }\n        newResults = [];\n        results.forEach(function(scoreWordPair) {\n            if (scoreWordPair[0] >= minMatchScore) {\n                newResults.push([scoreWordPair[0], this.exactSet[scoreWordPair[1]]]);\n            }\n        }.bind(this));\n        return newResults;\n    };\n\n    fuzzyset.add = function(value) {\n        var normalizedValue = this._normalizeStr(value);\n        if (normalizedValue in this.exactSet) {\n            return false;\n        }\n\n        var i = this.gramSizeLower;\n        for (i; i < this.gramSizeUpper + 1; ++i) {\n            this._add(value, i);\n        }\n    };\n\n    fuzzyset._add = function(value, gramSize) {\n        var normalizedValue = this._normalizeStr(value),\n            items = this.items[gramSize] || [],\n            index = items.length;\n\n        items.push(0);\n        var gramCounts = _gramCounter(normalizedValue, gramSize),\n            sumOfSquareGramCounts = 0,\n            gram, gramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                this.matchDict[gram].push([index, gramCount]);\n            } else {\n                this.matchDict[gram] = [[index, gramCount]];\n            }\n        }\n        var vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        items[index] = [vectorNormal, normalizedValue];\n        this.items[gramSize] = items;\n        this.exactSet[normalizedValue] = value;\n    };\n\n    fuzzyset._normalizeStr = function(str) {\n        if (Object.prototype.toString.call(str) !== '[object String]') throw 'Must use a string as argument to FuzzySet functions';\n        return str.toLowerCase();\n    };\n\n    // return length of items in set\n    fuzzyset.length = function() {\n        var count = 0,\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                count += 1;\n            }\n        }\n        return count;\n    };\n\n    // return is set is empty\n    fuzzyset.isEmpty = function() {\n        for (var prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // return list of values loaded into set\n    fuzzyset.values = function() {\n        var values = [],\n            prop;\n        for (prop in this.exactSet) {\n            if (this.exactSet.hasOwnProperty(prop)) {\n                values.push(this.exactSet[prop]);\n            }\n        }\n        return values;\n    };\n\n\n    // initialization\n    var i = fuzzyset.gramSizeLower;\n    for (i; i < fuzzyset.gramSizeUpper + 1; ++i) {\n        fuzzyset.items[i] = [];\n    }\n    // add all the items to the set\n    for (i = 0; i < arr.length; ++i) {\n        fuzzyset.add(arr[i]);\n    }\n\n    return fuzzyset;\n};\n\nexport default FuzzySet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}