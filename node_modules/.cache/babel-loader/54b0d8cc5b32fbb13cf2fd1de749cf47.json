{"ast":null,"code":"export class SelectionText {\n  constructor(elm) {\n    this.elm = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.value = void 0;\n    var {\n      selectionStart,\n      selectionEnd\n    } = elm;\n    this.elm = elm;\n    this.start = selectionStart;\n    this.end = selectionEnd;\n    this.value = this.elm.value;\n  }\n  position(start, end) {\n    var {\n      selectionStart,\n      selectionEnd\n    } = this.elm;\n    this.start = typeof start === 'number' && !isNaN(start) ? start : selectionStart;\n    this.end = typeof end === 'number' && !isNaN(end) ? end : selectionEnd;\n    this.elm.selectionStart = this.start;\n    this.elm.selectionEnd = this.end;\n    return this;\n  }\n  insertText(text) {\n    // Most of the used APIs only work with the field selected\n    this.elm.focus();\n    this.elm.setRangeText(text);\n    this.value = this.elm.value;\n    this.position();\n    return this;\n  }\n  getSelectedValue(start, end) {\n    var {\n      selectionStart,\n      selectionEnd\n    } = this.elm;\n    return this.value.slice(typeof start === 'number' && !isNaN(start) ? start : selectionStart, typeof end === 'number' && !isNaN(end) ? start : selectionEnd);\n  }\n  getLineStartNumber() {\n    var start = this.start;\n    while (start > 0) {\n      start--;\n      if (this.value.charAt(start) === '\\n') {\n        start++;\n        break;\n      }\n    }\n    return start;\n  }\n  /** Indent on new lines */\n\n  getIndentText() {\n    var start = this.getLineStartNumber();\n    var str = this.getSelectedValue(start);\n    var indent = '';\n    str.replace(/(^(\\s)+)/, (str, old) => indent = old);\n    return indent;\n  }\n  lineStarInstert(text) {\n    if (text) {\n      var oldStart = this.start;\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      this.position(start, this.end).insertText(str.split('\\n').map(txt => text + txt).join('\\n')).position(oldStart + text.length, this.end);\n    }\n    return this;\n  }\n  lineStarRemove(text) {\n    if (text) {\n      var oldStart = this.start;\n      var start = this.getLineStartNumber();\n      var str = this.getSelectedValue(start);\n      var reg = new RegExp(\"^\" + text, 'g');\n      var newStart = oldStart - text.length;\n      if (!reg.test(str)) {\n        newStart = oldStart;\n      }\n      this.position(start, this.end).insertText(str.split('\\n').map(txt => txt.replace(reg, '')).join('\\n')).position(newStart, this.end);\n    }\n  }\n  /** Notify any possible listeners of the change */\n\n  notifyChange() {\n    var event = new Event('input', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.elm.dispatchEvent(event);\n  }\n}","map":{"version":3,"sources":["../src/SelectionText.ts"],"names":["SelectionText","elm","start","end","value","constructor","selectionStart","selectionEnd","position","isNaN","insertText","text","focus","setRangeText","getSelectedValue","slice","getLineStartNumber","charAt","getIndentText","str","indent","replace","old","lineStarInstert","oldStart","split","map","txt","join","length","lineStarRemove","reg","RegExp","newStart","test","notifyChange","event","Event","bubbles","cancelable","dispatchEvent"],"mappings":"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","sourcesContent":["export class SelectionText {\n  elm: HTMLTextAreaElement;\n  start: number;\n  end: number;\n  value: string;\n  constructor(elm: HTMLTextAreaElement) {\n    const { selectionStart, selectionEnd } = elm;\n    this.elm = elm;\n    this.start = selectionStart;\n    this.end = selectionEnd;\n    this.value = this.elm.value;\n  }\n  position(start?: number, end?: number) {\n    const { selectionStart, selectionEnd } = this.elm;\n    this.start = typeof start === 'number' && !isNaN(start) ? start : selectionStart;\n    this.end = typeof end === 'number' && !isNaN(end) ? end : selectionEnd;\n    this.elm.selectionStart = this.start;\n    this.elm.selectionEnd = this.end;\n    return this;\n  }\n  insertText(text: string) {\n    // Most of the used APIs only work with the field selected\n    this.elm.focus();\n    this.elm.setRangeText(text);\n    this.value = this.elm.value;\n    this.position();\n    return this;\n  }\n  getSelectedValue(start?: number, end?: number) {\n    const { selectionStart, selectionEnd } = this.elm;\n    return this.value.slice(\n      typeof start === 'number' && !isNaN(start) ? start : selectionStart,\n      typeof end === 'number' && !isNaN(end) ? start : selectionEnd,\n    );\n  }\n  getLineStartNumber() {\n    let start = this.start;\n    while (start > 0) {\n      start--;\n      if (this.value.charAt(start) === '\\n') {\n        start++;\n        break;\n      }\n    }\n    return start;\n  }\n  /** Indent on new lines */\n  getIndentText() {\n    const start = this.getLineStartNumber();\n    const str = this.getSelectedValue(start);\n    let indent = '';\n    str.replace(/(^(\\s)+)/, (str, old) => (indent = old));\n    return indent;\n  }\n  lineStarInstert(text: string) {\n    if (text) {\n      const oldStart = this.start;\n      const start = this.getLineStartNumber();\n      const str = this.getSelectedValue(start);\n      this.position(start, this.end)\n        .insertText(\n          str\n            .split('\\n')\n            .map((txt) => text + txt)\n            .join('\\n'),\n        )\n        .position(oldStart + text.length, this.end);\n    }\n    return this;\n  }\n  lineStarRemove(text: string) {\n    if (text) {\n      const oldStart = this.start;\n      const start = this.getLineStartNumber();\n      const str = this.getSelectedValue(start);\n      const reg = new RegExp(`^${text}`, 'g');\n      let newStart = oldStart - text.length;\n      if (!reg.test(str)) {\n        newStart = oldStart;\n      }\n      this.position(start, this.end)\n        .insertText(\n          str\n            .split('\\n')\n            .map((txt) => txt.replace(reg, ''))\n            .join('\\n'),\n        )\n        .position(newStart, this.end);\n    }\n  }\n  /** Notify any possible listeners of the change */\n  notifyChange() {\n    const event = new Event('input', { bubbles: true, cancelable: false });\n    this.elm.dispatchEvent(event);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}