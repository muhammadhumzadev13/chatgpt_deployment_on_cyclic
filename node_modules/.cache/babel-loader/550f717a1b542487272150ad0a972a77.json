{"ast":null,"code":"import _initializerDefineProperty from \"/home/humza/Documents/afterflea/projects/chatgpt_deployment_on_cyclic/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/home/humza/Documents/afterflea/projects/chatgpt_deployment_on_cyclic/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/home/humza/Documents/afterflea/projects/chatgpt_deployment_on_cyclic/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _jsxFileName = \"/home/humza/Documents/afterflea/projects/chatgpt_deployment_on_cyclic/src/Core/Tool.js\",\n  _dec,\n  _dec2,\n  _class,\n  _class2,\n  _descriptor,\n  _descriptor2,\n  _descriptor3,\n  _descriptor4,\n  _descriptor5,\n  _descriptor6,\n  _descriptor7,\n  _descriptor8,\n  _descriptor9,\n  _descriptor10;\nimport React, { Component } from 'react';\nimport { PencilIcon, ClockIcon, InformationCircleIcon, DuplicateIcon } from '@heroicons/react/outline';\nimport { Helmet } from \"react-helmet\";\nimport Header from '../Components/Header';\nimport Body, { Grid, Col } from '../Components/Body';\nimport Button from '../Components/Button';\nimport Output from '../Components/Output';\nimport Countdown from 'react-countdown';\nimport { withRouter } from 'react-router-dom';\nimport { observable, makeObservable, computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport EntryTabs from '../Components/EntryTabs';\nimport EntryPrompt from '../Components/EntryPrompt';\nimport EntryInput from '../Components/EntryInput';\nimport EntryN from '../Components/EntryN';\nimport Filter from 'bad-words';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet filterBadWords = new Filter();\nlet Tool = (_dec = inject('store'), _dec2 = observable.deep, _dec(_class = observer(_class = (_class2 = class Tool extends Component {\n  constructor(props) {\n    super(props);\n    _initializerDefineProperty(this, \"tool\", _descriptor, this);\n    _initializerDefineProperty(this, \"prompts\", _descriptor2, this);\n    _initializerDefineProperty(this, \"currentPrompt\", _descriptor3, this);\n    _initializerDefineProperty(this, \"currentOption\", _descriptor4, this);\n    _initializerDefineProperty(this, \"error\", _descriptor5, this);\n    _initializerDefineProperty(this, \"output\", _descriptor6, this);\n    _initializerDefineProperty(this, \"outputs\", _descriptor7, this);\n    _initializerDefineProperty(this, \"code\", _descriptor8, this);\n    _initializerDefineProperty(this, \"loading\", _descriptor9, this);\n    _initializerDefineProperty(this, \"date\", _descriptor10, this);\n    this.countdown = [];\n    this.handleCurrentPrompt = val => {\n      this.currentPrompt = val;\n    };\n    this.checkMinimumPrompts = () => {\n      let shouldReturn = false;\n      this.prompts[this.currentPrompt].prompts.forEach((prompt, promptIndex) => {\n        if (prompt.min) {\n          if (prompt.value.length < prompt.min) {\n            shouldReturn = true;\n            prompt.error = `${prompt.title} needs to meet the minimum ${prompt.min} characters`;\n          }\n        }\n      });\n      return shouldReturn;\n    };\n    this.clearExampleTimeout = [];\n    this.onStartUsing = async () => {\n      this.loading = false;\n      this.error = \"\";\n      this.clearExampleTimeout.forEach((item, index) => {\n        clearTimeout(this.clearExampleTimeout[index]);\n      });\n      this.currentOption = \"Start Using\";\n    };\n    this.onExample = async () => {\n      this.loading = true;\n      this.error = \"\";\n      this.output = \"\";\n      this.outputs = [];\n      this.code = ``;\n      this.currentOption = \"Example\";\n      let totalLength = 0;\n      this.clearExampleTimeout.forEach((item, index) => {\n        clearTimeout(this.clearExampleTimeout[index]);\n      });\n      this.prompts[this.currentPrompt].prompts.forEach((prompt, promptIndex) => {\n        this.prompts[this.currentPrompt].prompts[promptIndex].value = \"\";\n      });\n      this.prompts[this.currentPrompt].prompts.forEach((prompt, promptIndex) => {\n        for (let timeoutIndex = 0; timeoutIndex < prompt.example.length; timeoutIndex++) {\n          totalLength++;\n          this.clearExampleTimeout[totalLength] = setTimeout(() => {\n            this.prompts[this.currentPrompt].prompts[promptIndex].value += prompt.example[timeoutIndex];\n          }, 7 * totalLength);\n        }\n      });\n      totalLength++;\n      if (this.prompts[this.currentPrompt].example.output) {\n        this.clearExampleTimeout[totalLength] = setTimeout(() => {\n          this.output = this.prompts[this.currentPrompt].example.output;\n          totalLength++;\n          this.clearExampleTimeout[totalLength] = setTimeout(() => {\n            this.loading = false;\n            this.currentOption = \"Start Using\";\n            this.prompts[this.currentPrompt].prompts[0].value += \" \";\n          }, 7 * totalLength + this.prompts[this.currentPrompt].example.output.length * 7 + 500);\n        }, 7 * totalLength + 500);\n      }\n      if (this.prompts[this.currentPrompt].example.code) {\n        totalLength++;\n        this.clearExampleTimeout[totalLength] = setTimeout(() => {\n          this.code = `${this.prompts[this.currentPrompt].example.code}`;\n          this.loading = false;\n        }, 7 * totalLength + 500);\n      }\n      if (this.prompts[this.currentPrompt].example.outputs) {\n        this.clearExampleTimeout[totalLength] = setTimeout(() => {\n          this.outputs = this.prompts[this.currentPrompt].example.outputs;\n          totalLength++;\n          this.clearExampleTimeout[totalLength] = setTimeout(() => {\n            this.loading = false;\n            this.currentOption = \"Start Using\";\n            // this.prompts[this.currentPrompt].prompts[0].value += \" \"\n          }, 7 * totalLength + 500);\n        }, 7 * totalLength + 500);\n      }\n    };\n    this.sanitizeAllPrompts = () => {\n      this.prompts[this.currentPrompt].prompts.forEach(prompt => {\n        if (!prompt.value) {\n          return false;\n        }\n        if (prompt.type === \"number\") {\n          return false;\n        }\n        prompt.value = prompt.value.trim();\n        if (filterBadWords.isProfane(prompt.value)) {\n          prompt.error = \"Unsafe content , please try different language\";\n          throw Error(\"Unsafe content\");\n        }\n      });\n    };\n    this.contentFilterFlagged = async response => {\n      this.error = response.message;\n      this.date = Date.now() + 5000;\n      this.countdown.forEach(countdown => {\n        if (countdown) {\n          countdown.stop();\n          countdown.start();\n        }\n      });\n      this.loading = false;\n    };\n    this.checkOutput = output => {\n      if (output) {\n        output = output.replace(/^\\s+|\\s+$/g, '');\n        // output = output.replace(/\\s{2,}/g, ' ')\n      }\n\n      return output;\n    };\n    this.onGenerateClick = async () => {\n      try {\n        this.error = \"\";\n        this.output = \"\";\n        this.code = ``;\n        this.outputs = [];\n        this.loading = true;\n        let checkMinimumPrompts = this.checkMinimumPrompts();\n        if (checkMinimumPrompts) {\n          this.loading = false;\n          return false;\n        }\n        // this.sanitizeAllPrompts()\n\n        let postObj = {};\n        this.prompts[this.currentPrompt].prompts.forEach(prompt => {\n          postObj[prompt.attr] = prompt.value;\n        });\n        postObj.currentPrompt = this.prompts[this.currentPrompt].title;\n        if (this.prompts[this.currentPrompt].n) {\n          postObj.n = this.prompts[this.currentPrompt].n;\n        }\n        let response = await this.props.store.api.post(this.tool.api, postObj);\n        if (!response.data.success) {\n          this.contentFilterFlagged(response.data);\n          return false;\n        }\n        if (response.data.output) {\n          this.output = this.checkOutput(response.data.output);\n        }\n        if (response.data.code) {\n          this.code = response.data.code;\n        }\n        if (response.data.outputs) {\n          this.outputs = response.data.outputs;\n        }\n        this.date = Date.now() + 10000;\n        this.countdown.forEach(countdown => {\n          if (countdown) {\n            countdown.stop();\n            countdown.start();\n          }\n        });\n        this.loading = false;\n      } catch (error) {\n        console.log(error);\n        this.countdown.forEach(countdown => {\n          if (countdown) {\n            countdown.stop();\n            countdown.start();\n          }\n        });\n        this.loading = false;\n      }\n    };\n    makeObservable(this);\n    this.tool = this.props.store.getToolByUrl(this.props.location.pathname);\n    if (!this.tool) {\n      window.location.href = '/';\n    } else {\n      this.prompts = [...this.tool.prompts];\n    }\n  }\n  get isGenerateButtonDisabled() {\n    if (this.loading) {\n      return true;\n    }\n    return false;\n  }\n  get disabled() {\n    if (this.prompts[this.currentPrompt].prompts[0].value.length < 1) {\n      return true;\n    }\n\n    // this.prompts[this.currentPrompt].prompts[promptIndex].value\n    return false;\n  }\n  get isMinLength() {\n    if (!this.props.prompt.min) {\n      return false;\n    }\n    if (!this.props.prompt.type === \"number\") {\n      return false;\n    }\n    return false;\n  }\n  get language() {\n    let language = \"\";\n    this.prompts[this.currentPrompt].prompts.forEach(prompt => {\n      if (prompt.attr === \"language\") {\n        language = `${prompt.value}`;\n      }\n    });\n    return language;\n  }\n  render() {\n    // required for mobx to pick up deeply nested value \n    const currentValue = this.prompts[this.currentPrompt].prompts[0].value;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: `${this.tool.title} Tool - OpenAI Template`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        title: this.tool.title,\n        desc: this.tool.desc,\n        Icon: this.tool.Icon,\n        fromColor: this.tool.fromColor,\n        category: this.tool.category,\n        options: [{\n          title: \"Start Using\",\n          Icon: PencilIcon,\n          color: this.props.store.profile.credits ? 'green' : 'red',\n          onClick: this.onStartUsing\n        }, {\n          title: \"Example\",\n          color: 'yellow',\n          Icon: InformationCircleIcon,\n          onClick: this.onExample\n        }],\n        currentOption: this.currentOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Body, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: \"6\",\n            children: [/*#__PURE__*/_jsxDEV(EntryTabs, {\n              prompts: this.prompts,\n              currentPrompt: this.currentPrompt,\n              onChange: this.handleCurrentPrompt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 33\n            }, this), this.prompts.map((prompt, index) => /*#__PURE__*/_jsxDEV(EntryPrompt, {\n              prompt: prompt,\n              index: index,\n              disabled: this.disabled,\n              currentPrompt: this.currentPrompt,\n              children: [prompt.prompts.map((promptInput, index) => /*#__PURE__*/_jsxDEV(EntryInput, {\n                prompt: promptInput,\n                language: this.language,\n                index: index,\n                disabled: this.disabled\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 45\n              }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"md:flex\",\n                children: [/*#__PURE__*/_jsxDEV(Countdown, {\n                  ref: countdown => this.countdown[index] = countdown,\n                  date: this.date,\n                  renderer: props => /*#__PURE__*/_jsxDEV(Button, {\n                    title: props.total ? `Timeout ${props.total / 1000} secs` : \"Perform Request\",\n                    disabled: props.total || this.isGenerateButtonDisabled,\n                    Icon: props.total ? ClockIcon : currentValue ? DuplicateIcon : PencilIcon,\n                    onClick: this.onGenerateClick\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(EntryN, {\n                  prompts: this.prompts,\n                  currentPrompt: this.currentPrompt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 37\n              }, this), this.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-4\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: `${this.error ? \"text-red-400\" : \"text-gray-400\"} font-medium transition-all`,\n                  children: this.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 74\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 52\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: \"6\",\n            children: /*#__PURE__*/_jsxDEV(Output, {\n              title: this.tool.output.title,\n              desc: this.tool.output.desc,\n              Icon: this.tool.output.Icon || this.tool.Icon,\n              fromColor: this.tool.fromColor,\n              toColor: this.tool.toColor,\n              loading: this.loading,\n              output: this.output,\n              outputs: this.outputs,\n              code: this.code,\n              language: this.language,\n              outputsColor: this.tool.output.color,\n              OutputsIcon: this.tool.output.Icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"tool\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"prompts\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"currentPrompt\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"currentOption\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"Start Using\";\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"error\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"output\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"outputs\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"code\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, \"date\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return Date.now() + 1000;\n  }\n}), _applyDecoratedDescriptor(_class2.prototype, \"isGenerateButtonDisabled\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"isGenerateButtonDisabled\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"disabled\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"disabled\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"isMinLength\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"isMinLength\"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, \"language\", [computed], Object.getOwnPropertyDescriptor(_class2.prototype, \"language\"), _class2.prototype)), _class2)) || _class) || _class);\nexport default _c = withRouter(Tool);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","PencilIcon","ClockIcon","InformationCircleIcon","DuplicateIcon","Helmet","Header","Body","Grid","Col","Button","Output","Countdown","withRouter","observable","makeObservable","computed","observer","inject","EntryTabs","EntryPrompt","EntryInput","EntryN","Filter","filterBadWords","Tool","deep","constructor","props","countdown","handleCurrentPrompt","val","currentPrompt","checkMinimumPrompts","shouldReturn","prompts","forEach","prompt","promptIndex","min","value","length","error","title","clearExampleTimeout","onStartUsing","loading","item","index","clearTimeout","currentOption","onExample","output","outputs","code","totalLength","timeoutIndex","example","setTimeout","sanitizeAllPrompts","type","trim","isProfane","Error","contentFilterFlagged","response","message","date","Date","now","stop","start","checkOutput","replace","onGenerateClick","postObj","attr","n","store","api","post","tool","data","success","console","log","getToolByUrl","location","pathname","window","href","isGenerateButtonDisabled","disabled","isMinLength","language","render","currentValue","desc","Icon","fromColor","category","color","profile","credits","onClick","map","promptInput","total","toColor"],"sources":["/home/humza/Documents/afterflea/projects/chatgpt_deployment_on_cyclic/src/Core/Tool.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    PencilIcon,\r\n    ClockIcon,\r\n    InformationCircleIcon,\r\n    DuplicateIcon,\r\n  } from '@heroicons/react/outline'\r\n\r\n  import {Helmet} from \"react-helmet\";\r\n\r\nimport Header from '../Components/Header'\r\nimport Body, { Grid, Col } from '../Components/Body'\r\nimport Button from '../Components/Button'\r\nimport Output from '../Components/Output'\r\nimport Countdown from 'react-countdown';\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { observable, makeObservable, computed,  } from 'mobx'\r\nimport { observer, inject,  } from 'mobx-react'\r\n\r\nimport EntryTabs from '../Components/EntryTabs'\r\nimport EntryPrompt from '../Components/EntryPrompt'\r\nimport EntryInput from '../Components/EntryInput'\r\nimport EntryN from '../Components/EntryN'\r\n\r\nimport Filter from 'bad-words'\r\nlet filterBadWords = new Filter()\r\n\r\n\r\n@inject('store')\r\n@observer\r\nclass Tool extends Component {\r\n\r\n    @observable tool = {}\r\n\r\n\t@observable.deep prompts = []\r\n\t@observable currentPrompt = 0\r\n\t@observable currentOption = \"Start Using\"\r\n    \r\n    @observable error = \"\"\r\n\r\n    @observable output = \"\"\r\n\t@observable outputs = []\r\n    @observable code = \"\"\r\n\r\n\r\n    @observable loading = false\r\n    \r\n\t@observable date = Date.now() + 1000\r\n    countdown = []\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        makeObservable(this)\r\n        this.tool = this.props.store.getToolByUrl(this.props.location.pathname)\r\n        if(!this.tool){\r\n\t\t\twindow.location.href = '/';\r\n\t\t} else {\r\n            this.prompts = [...this.tool.prompts]\r\n        }\r\n    }\r\n\r\n    handleCurrentPrompt = (val) => {\r\n\t\tthis.currentPrompt = val\r\n\t}\r\n\r\n    @computed get isGenerateButtonDisabled(){\r\n\r\n        \r\n\r\n        if(this.loading){\r\n            return true\r\n        }\r\n       \r\n        return false\r\n    }\r\n\r\n    @computed get disabled(){\r\n\r\n        if(this.prompts[this.currentPrompt].prompts[0].value.length < 1){\r\n            return true\r\n        }\r\n\r\n        \r\n        // this.prompts[this.currentPrompt].prompts[promptIndex].value\r\n        return false\r\n    }\r\n\r\n    @computed get isMinLength() {\r\n\t\t\r\n\t\tif(!this.props.prompt.min){\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif(!this.props.prompt.type === \"number\"){\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t\r\n\t\treturn false\r\n\t}\r\n\r\n    checkMinimumPrompts = () => {\r\n\r\n        let shouldReturn = false\r\n       \r\n        this.prompts[this.currentPrompt].prompts.forEach((prompt, promptIndex) => {\r\n            if(prompt.min){\r\n                if(prompt.value.length < prompt.min){\r\n                    shouldReturn = true\r\n                    prompt.error = `${prompt.title} needs to meet the minimum ${prompt.min} characters`;\r\n                }\r\n            }\r\n        })\r\n\r\n        return shouldReturn\r\n    }\r\n\r\n\r\n    clearExampleTimeout = []\r\n\r\n    onStartUsing  = async () => {\r\n        this.loading = false\r\n        this.error = \"\"\r\n        this.clearExampleTimeout.forEach((item,index) => {\r\n            clearTimeout(this.clearExampleTimeout[index])\r\n        })\r\n        this.currentOption = \"Start Using\"\r\n    }\r\n\r\n    onExample = async () => {\r\n        this.loading = true\r\n        this.error = \"\"\r\n        this.output = \"\"\r\n        this.outputs = []\r\n        this.code = ``\r\n\r\n        this.currentOption = \"Example\"\r\n\r\n        let totalLength = 0;\r\n\r\n        this.clearExampleTimeout.forEach((item,index) => {\r\n            clearTimeout(this.clearExampleTimeout[index])\r\n        })\r\n        \r\n        this.prompts[this.currentPrompt].prompts.forEach((prompt, promptIndex) => {\r\n            this.prompts[this.currentPrompt].prompts[promptIndex].value = \"\"\r\n        })\r\n\r\n        this.prompts[this.currentPrompt].prompts.forEach((prompt, promptIndex) => {\r\n            for (let timeoutIndex = 0; timeoutIndex < prompt.example.length; timeoutIndex++) {\r\n                totalLength++\r\n                this.clearExampleTimeout[totalLength] = setTimeout(()=> {\r\n                    this.prompts[this.currentPrompt].prompts[promptIndex].value += prompt.example[timeoutIndex]\r\n                }, 7 * totalLength)\r\n            }\r\n        })\r\n\r\n\r\n      \r\n        totalLength++\r\n        \r\n        if(this.prompts[this.currentPrompt].example.output){\r\n            this.clearExampleTimeout[totalLength] = setTimeout(()=> {\r\n                this.output =  this.prompts[this.currentPrompt].example.output\r\n                totalLength++\r\n                this.clearExampleTimeout[totalLength] = setTimeout(()=> {\r\n                    this.loading = false\r\n                    this.currentOption = \"Start Using\"\r\n                    this.prompts[this.currentPrompt].prompts[0].value += \" \"\r\n                }, 7 * totalLength + this.prompts[this.currentPrompt].example.output.length * 7 + 500 )\r\n    \r\n            }, (7 * totalLength) + 500)\r\n        }\r\n\r\n        if(this.prompts[this.currentPrompt].example.code){\r\n            totalLength++\r\n            this.clearExampleTimeout[totalLength] = setTimeout(()=> {\r\n                this.code = `${this.prompts[this.currentPrompt].example.code}`\r\n                this.loading = false\r\n            }, (7 * totalLength) + 500)\r\n        }\r\n\r\n        if(this.prompts[this.currentPrompt].example.outputs){\r\n            this.clearExampleTimeout[totalLength] = setTimeout(()=> {\r\n                this.outputs =  this.prompts[this.currentPrompt].example.outputs\r\n    \r\n                totalLength++\r\n                this.clearExampleTimeout[totalLength] = setTimeout(()=> {\r\n                    this.loading = false\r\n                    this.currentOption = \"Start Using\"\r\n                    // this.prompts[this.currentPrompt].prompts[0].value += \" \"\r\n                }, 7 * totalLength + 500)\r\n    \r\n            }, (7 * totalLength) + 500)\r\n        }\r\n       \r\n\r\n    }\r\n\r\n\r\n    sanitizeAllPrompts = () => {\r\n        this.prompts[this.currentPrompt].prompts.forEach((prompt) => {\r\n            if(!prompt.value){\r\n                return false;\r\n            }\r\n            if(prompt.type === \"number\"){\r\n                return false;\r\n            }\r\n           \r\n            prompt.value = prompt.value.trim()\r\n\r\n            if(filterBadWords.isProfane(prompt.value)){\r\n                prompt.error = \"Unsafe content , please try different language\"\r\n                throw Error(\"Unsafe content\")\r\n            }\r\n        })\r\n\t}\r\n\r\n    contentFilterFlagged = async (response) => {\r\n        this.error = response.message\r\n\r\n        this.date = Date.now() + 5000\r\n        this.countdown.forEach(countdown => {\r\n            if(countdown){\r\n                countdown.stop()\r\n                countdown.start()\r\n            }\r\n        })\r\n        this.loading = false\r\n    }\r\n\r\n    checkOutput = (output) => {\r\n\t\tif(output){\r\n\t\t\toutput = output.replace(/^\\s+|\\s+$/g, '')\r\n            // output = output.replace(/\\s{2,}/g, ' ')\r\n\t\t}\r\n\t\treturn output\r\n\t}\r\n\r\n    @computed get language(){\r\n        let language = \"\"\r\n        this.prompts[this.currentPrompt].prompts.forEach(prompt => {\r\n            if(prompt.attr === \"language\"){\r\n                language = `${prompt.value}`\r\n            }\r\n        })\r\n        return language\r\n    }\r\n\r\n    onGenerateClick = async () => {\r\n        try {\r\n            this.error = \"\"\r\n            this.output = \"\"\r\n            this.code = ``\r\n            this.outputs = []\r\n            this.loading = true\r\n\r\n            let checkMinimumPrompts = this.checkMinimumPrompts()\r\n            if(checkMinimumPrompts){\r\n                this.loading = false\r\n                return false\r\n            }\r\n            // this.sanitizeAllPrompts()\r\n\r\n            let postObj = {} \r\n\r\n            this.prompts[this.currentPrompt].prompts.forEach((prompt) => {\r\n                postObj[prompt.attr] = prompt.value\r\n            })\r\n\r\n            postObj.currentPrompt = this.prompts[this.currentPrompt].title\r\n            if(this.prompts[this.currentPrompt].n){\r\n                postObj.n = this.prompts[this.currentPrompt].n\r\n            }\r\n\r\n            let response = await this.props.store.api\r\n                .post(this.tool.api, postObj)\r\n\r\n            if(!response.data.success){\r\n                this.contentFilterFlagged(response.data)\r\n                return false\r\n            }\r\n\r\n            if(response.data.output){\r\n                this.output = this.checkOutput(response.data.output)\r\n            }\r\n\r\n            if(response.data.code){\r\n                this.code = response.data.code\r\n            }\r\n\r\n            if(response.data.outputs){\r\n                this.outputs = response.data.outputs\r\n            }\r\n            \r\n            this.date = Date.now() + 10000\r\n            this.countdown.forEach(countdown => {\r\n                if(countdown){\r\n                    countdown.stop()\r\n                    countdown.start()\r\n                }\r\n            })\r\n            this.loading = false\r\n        } catch (error){\r\n            console.log(error)\r\n            this.countdown.forEach(countdown => {\r\n                if(countdown){\r\n                    countdown.stop()\r\n                    countdown.start()\r\n                }\r\n            })\r\n            this.loading = false\r\n        }\r\n    }\r\n\r\n        render() {\r\n\r\n            // required for mobx to pick up deeply nested value \r\n            const currentValue = this.prompts[this.currentPrompt].prompts[0].value\r\n\r\n            return(\r\n                <>\r\n                <Helmet>\r\n                    <title>{`${this.tool.title} Tool - OpenAI Template`}</title>\r\n                </Helmet>\r\n                <Header \r\n                    title={this.tool.title}\r\n                    desc={this.tool.desc}\r\n                    Icon={this.tool.Icon}\r\n\t\t\t\t\tfromColor={this.tool.fromColor}\r\n\t\t\t\t\tcategory={this.tool.category}\r\n                    \r\n                    options={[\r\n                        {   title: \"Start Using\", \r\n                            Icon: PencilIcon, \r\n                            color: this.props.store.profile.credits ? 'green' : 'red',\r\n                            onClick: this.onStartUsing \r\n                        },\r\n                        { title: \"Example\", color: 'yellow', Icon: InformationCircleIcon, onClick: this.onExample},\r\n                    ]}\r\n                    currentOption={this.currentOption}\r\n                />\r\n                <Body>\r\n                        <Grid>\r\n                            <Col span=\"6\">\r\n\r\n                                <EntryTabs\r\n                                    prompts={this.prompts}\r\n                                    currentPrompt={this.currentPrompt}\r\n                                    onChange={this.handleCurrentPrompt}\r\n                                />\r\n\r\n                                {this.prompts.map((prompt, index) => \r\n                                    <EntryPrompt\r\n                                        prompt={prompt} \r\n                                        key={index} \r\n                                        index={index}\r\n                                        disabled={this.disabled}\r\n                                        currentPrompt={this.currentPrompt}\r\n                                    >\r\n                                        {prompt.prompts.map((promptInput, index) => \r\n                                            <EntryInput\r\n                                                prompt={promptInput}\r\n                                                key={index}\r\n                                                language={this.language}\r\n                                                index={index}\r\n                                                disabled={this.disabled}\r\n                                            />)}\r\n\r\n\r\n                                    <div className=\"md:flex\">\r\n                                        <Countdown \r\n                                            ref={countdown => this.countdown[index] = countdown} \r\n                                            date={this.date} \r\n                                            renderer={props => \r\n                                            <Button \r\n                                                title={props.total ? `Timeout ${props.total/1000} secs` : \"Perform Request\"}\r\n                                                disabled={props.total || this.isGenerateButtonDisabled}\r\n                                                Icon={props.total ? ClockIcon : currentValue ? DuplicateIcon : PencilIcon} \r\n                                                onClick={this.onGenerateClick} \r\n                                            />} \r\n                                        /> \r\n                                        <EntryN \r\n                                            prompts={this.prompts} \r\n                                            currentPrompt={this.currentPrompt}\r\n                                        />\r\n                                    </div>\r\n\r\n\r\n\r\n                                    {this.error && <div className=\"mt-4\"><label \r\n                                        className={`${this.error ? \"text-red-400\" : \"text-gray-400\"} font-medium transition-all`}>\r\n                                            {this.error}\r\n                                    </label></div>}\r\n\r\n                                    </EntryPrompt>\r\n                                )}\r\n\r\n                               \r\n                            </Col>\r\n                            <Col span=\"6\">\r\n                             <Output \r\n                                    title={this.tool.output.title}\r\n                                    desc={this.tool.output.desc}\r\n\r\n                                    Icon={this.tool.output.Icon || this.tool.Icon}\r\n                                    fromColor={this.tool.fromColor}\r\n\t\t\t\t\t\t\t\t\ttoColor={this.tool.toColor}\r\n                                    \r\n                                    loading={this.loading}\r\n                                    output={this.output}\r\n\t\t\t\t\t\t\t\t\toutputs={this.outputs}\r\n                                    code={this.code}\r\n                                    language={this.language}\r\n                                    \r\n                                    outputsColor={this.tool.output.color}\r\n                                    OutputsIcon={this.tool.output.Icon}\r\n                            /> \r\n                        </Col> \r\n                    </Grid> \r\n                </Body>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Tool)"],"mappings":"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"},"metadata":{},"sourceType":"module"}