{"ast":null,"code":"/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   var h = require('hastscript')\n *   var toString = require('hast-util-to-string')\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n'use strict';\n\nmodule.exports = toString;\nfunction toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node);\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : '';\n}\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value;\n  }\n  return node.children ? all(node) : '';\n}\nfunction all(node) {\n  var children = node.children;\n  var length = children.length;\n  var index = -1;\n  var result = [];\n  while (++index < length) {\n    result[index] = one(children[index]);\n  }\n  return result.join('');\n}","map":{"version":3,"names":["module","exports","toString","node","all","value","one","type","children","length","index","result","join"],"sources":["/home/humza/Documents/afterflea/projects/chatgpt_deployment_on_cyclic/OpenAI-Template.1.3-update-auth-signups/node_modules/hast-util-to-string/index.js"],"sourcesContent":["/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   var h = require('hastscript')\n *   var toString = require('hast-util-to-string')\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n'use strict'\n\nmodule.exports = toString\n\nfunction toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return node.children ? all(node) : ''\n}\n\nfunction all(node) {\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var result = []\n\n  while (++index < length) {\n    result[index] = one(children[index])\n  }\n\n  return result.join('')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,QAAQ;AAEzB,SAASA,QAAQ,CAACC,IAAI,EAAE;EACtB;EACA;EACA,IAAI,UAAU,IAAIA,IAAI,EAAE;IACtB,OAAOC,GAAG,CAACD,IAAI,CAAC;EAClB;;EAEA;EACA,OAAO,OAAO,IAAIA,IAAI,GAAGA,IAAI,CAACE,KAAK,GAAG,EAAE;AAC1C;AAEA,SAASC,GAAG,CAACH,IAAI,EAAE;EACjB,IAAIA,IAAI,CAACI,IAAI,KAAK,MAAM,EAAE;IACxB,OAAOJ,IAAI,CAACE,KAAK;EACnB;EAEA,OAAOF,IAAI,CAACK,QAAQ,GAAGJ,GAAG,CAACD,IAAI,CAAC,GAAG,EAAE;AACvC;AAEA,SAASC,GAAG,CAACD,IAAI,EAAE;EACjB,IAAIK,QAAQ,GAAGL,IAAI,CAACK,QAAQ;EAC5B,IAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAM;EAC5B,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,MAAM,GAAG,EAAE;EAEf,OAAO,EAAED,KAAK,GAAGD,MAAM,EAAE;IACvBE,MAAM,CAACD,KAAK,CAAC,GAAGJ,GAAG,CAACE,QAAQ,CAACE,KAAK,CAAC,CAAC;EACtC;EAEA,OAAOC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AACxB"},"metadata":{},"sourceType":"script"}